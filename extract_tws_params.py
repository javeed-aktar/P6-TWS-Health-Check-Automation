#!/usr/bin/python
## Developed by Karthikeyan P, Date: 20-March-2024.
## Version: 1.0, This script Works only for TWS Linux/AIX Installation.
## Version: 1.1, Added the Function to determine the Version of TWS.
## This Script retrieves the TWS Performance Metrics from the Output generated by TWS DataCapture Utility.
## Script Name: extract_tws_params.py
## Usage: extract_tws_params.py <TWS Package>.zip(.tar/.tar.Z/tar.gz) <TWS DB Config File>
## To Generate the TWS DB Configuration file, Run the below command with db2 instance Admin(Ex: db2inst1).
## ". /home/db2inst1/sqllib/db2profile; db2 connect to REPORTER > /dev/null 2>&1; db2 get db cfg > db_cfg"
## Modules ###
import getopt;
import sys;
import re;
import os;
import shutil;
import tarfile;
import json;
import zipfile;
from zipfile import *;
#import argparse;
###

## Path of the TWS Package
#parser = argparse.ArgumentParser(description="This Script retrieves the IBM Workload Scheduler Parameters");
#parser.add_argument("TWS_XXXX_XXXX.zip", type=str, help="Please provide the TWS Package");
#args = parser.parse_args();

### Functions.
def process_zip(tws_pkg, currdir):
  zip_extract = ZipFile(tws_pkg, 'r');
  tempdir = currdir + "/temp";
  #print(tempdir);
  if os.path.isdir(tempdir):
    shutil.rmtree(tempdir);
  os.mkdir(tempdir);
  zip_extract.extractall(tempdir);

def process_tar(tws_pkg, currdir):
  tar_extract = tarfile.open(tws_pkg);
  tempdir = currdir + "/temp";
  if os.path.isdir(tempdir):
    shutil.rmtree(tempdir);
  os.mkdir(tempdir);
  tar_extract.extractall(tempdir);
  tar_extract.close();

def process_Z(tws_pkg, currdir):
  tempdir = currdir + "/temp";
  if os.path.isdir(tempdir):
    shutil.rmtree(tempdir);
  os.mkdir(tempdir);
  os.system("tar -xzf " + tws_pkg + " -C " + tempdir);

def get_wlp_params(WLP_DSfile):
  #print "WebSphere Liberty DataSource File: ", WLP_DSfile;
  statementCacheSize = r"statementCacheSize\D+(\d+)\D";
  connectionTimeout = r"connectionTimeout\D+(\d+\w)\D";
  maxPoolSize = r"maxPoolSize\D+(\d+)\D";
  minPoolSize = r"minPoolSize\D+(\d+)\D";
  reapTime = r"reapTime\D+(\d+\w)\D";
  purgePolicy = r"purgePolicy\D\D(\w+)\D+";
  isolationLevel = r"isolationLevel\D\D(\w+)\D+";
  if os.path.isfile(WLP_DSfile):
    wlp_out = {};
    wlp_file_handle = open(WLP_DSfile, 'r');
    wlp_file_read = wlp_file_handle.read();
    for wlp_param_search_pattern in statementCacheSize, connectionTimeout, maxPoolSize, minPoolSize, reapTime, purgePolicy, isolationLevel:
      wlp_param_match = re.findall(wlp_param_search_pattern, wlp_file_read);
      wlp_out[re.findall(r"(\w+)\D+",wlp_param_search_pattern)[0]] = wlp_param_match[0]; ## Pushing the Values to a Hash
      #print re.findall(r"(\w+)\D+",wlp_param_search_pattern),":",wlp_param_match;
    wlp_file_handle.close();
    return wlp_out;
  else:
    print "Unable to find the WebSphere Liberty Profile datasource.xml file";
    sys.exit();

def get_tws_params(my_localopts):
  #print "TWS localopts file: ", my_localopts;
  bm_look = r"bm look\s+\D(\d+)";
  jm_read = r"jm read\s+\D(\d+)";
  jm_look = r"jm look\s+\D(\d+)";
  nm_read = r"nm read\s+\D(\d+)";
  bm_read = r"bm read\s+\D(\d+)";
  if os.path.isfile(my_localopts):
    tws_out = {};
    tws_file_handle = open(my_localopts, "r");
    tws_file_read = tws_file_handle.read();
    for tws_param_search_pattern in bm_look,jm_read,jm_look,nm_read,bm_read:
      tws_param_match = re.findall(tws_param_search_pattern, tws_file_read);
      tws_out[re.findall(r"\w+\D\w+", tws_param_search_pattern)[0]] = tws_param_match[0]; ## Pushing the Values to a Hash
      #print re.findall(r"\w+\D\w+", tws_param_search_pattern),":",tws_param_match;
    tws_file_handle.close();
    return tws_out;
  else: 
   print "Unable to find the TWS localopts file in the Provided Package";
   sys.exit();

def get_db_params(db_cfg):
  #print "db2 DB CFG FILE: ", db_cfg;
  SELF_TUNING_MEM = r"\(SELF_TUNING_MEM\)\W+(\w+)";
  APPLHEAPSZ = r"\(APPLHEAPSZ\)\W+(\w+)";
  DATABASE_MEMORY = r"\(DATABASE_MEMORY\)\W+(\w+)";
  DBHEAP = r"\(DBHEAP\)\W+(\w+)";
  STAT_HEAP_SZ = r"\(STAT_HEAP_SZ\)\W+(\w+)";
  AUTO_RUNSTATS = r"\(AUTO_RUNSTATS\)\W+(\w+)";
  AUTO_STMT_STATS = r"\(AUTO_STMT_STATS\)\W+(\w+)";
  AUTO_REORG = r"\(AUTO_REORG\)\W+(\w+)";
  PAGE_AGE_TRGT_MCR = r"\(PAGE_AGE_TRGT_MCR\)\W+(\d+)";
  db_out = {};
  db_file_handle = open(db_cfg, "r");
  db_file_read = db_file_handle.read();
  for db_param_search_pattern in SELF_TUNING_MEM, APPLHEAPSZ, DATABASE_MEMORY, DBHEAP, STAT_HEAP_SZ, AUTO_RUNSTATS, AUTO_STMT_STATS, AUTO_REORG, PAGE_AGE_TRGT_MCR:
    db_param_match = re.findall(db_param_search_pattern, db_file_read);
    #print re.findall(r"\W(\w+)\W+\w+", db_param_search_pattern),":",db_param_match;
    db_out[re.findall(r"\W(\w+)\W+\w+", db_param_search_pattern)[0]] = db_param_match[0];
  db_file_handle.close();
  return db_out;

def process_tws_package(WLP_CfgFile, LocalOpts):
    return get_wlp_params(WLP_CfgFile), get_tws_params(LocalOpts);

def process_db_package(db_cfg, tempdir):
  if db_cfg: ## Processing the Second Argument, ## Processing TWS db2 database Parameters
    return get_db_params(db_cfg);
  else:
    db_cfg = tempdir + "/dbparams.cfg";
    os.system(". /home/db2inst1/sqllib/db2profile; db2 connect to REPORTER > /dev/null 2>&1; db2 get db cfg > db_cfg");
    if os.path.isfile(db_cfg):
      #print "TWS db2 database configuration file generated successfully: ", db_cfg;
      return get_db_params(db_cfg);
    else:
      print "Unable to Generate the DB Configuration file for TWS, Proceeding without DB TWS parameters check";

def get_tws_version(version_file):
 # my_file = "/home/netcool/tws_script/TWS/temp/TWS_20240118_163246/TWS_Engine/version/patch.info";
  version_FH = open(version_file, "r");
  text = version_FH.read().splitlines();
  version_out = {};
  #print text;
  if len(text) == 1:
    version_info = text[0].split("-");
    for str in version_info:
      if re.findall(r"^\d", str):
        version_out["TWS Version"] = str;
      if re.findall(r"^FP", str):
        version_out["FixPack Level"] = str;
  else:
    print ("Unable to determine the version of IBM Workload Scheduler");
  return version_out;
####

######## MAIN #########
script_dir = os.getcwd();
output_file = script_dir + "/tws_parameters_all.out";
args = sys.argv[1:];
num_of_args = len(args);
#print "Number of Args: ", num_of_args;
if num_of_args == 1:
  my_tws_pkg = args[0];
  tws_db_cfg = "";
elif num_of_args == 2:
  my_tws_pkg = args[0];
  tws_db_cfg = args[1];
elif num_of_args > 2:
  print "Parameters passed are more than required. Exit";
  sys.exit();
else:
  my_tws_pkg = "";
  tws_db_cfg = "";
  
if my_tws_pkg: ## Processing the First Argument
  #print "TWS Package Provided is: ", my_tws_pkg;
  if re.search(r"\.zip$", my_tws_pkg): ## Processing the TWS Input Package
    process_zip(my_tws_pkg, script_dir);
  elif re.search(r"\.tar$", my_tws_pkg):
    process_tar(my_tws_pkg, script_dir);
  elif re.search(r"\.Z$", my_tws_pkg):
    process_Z(my_tws_pkg, script_dir);
  elif re.search(r"\.gz$", my_tws_pkg):
    process_Z(my_tws_pkg, script_dir);
  else:
    print "Package type unknown, Exit";
    sys.exit();
else:
  print "Please provide the TWS Package, Exit";
  sys.exit();

OUT_FileHandle = open(output_file, "w");

temp_dir = script_dir + "/temp"; ## This Directory will be created after successful extraction of TWS package(.zip/.tar)
os.chdir(temp_dir); ## Changing to temp_dir for processing
#print(temp_dir);
extract_path = os.listdir(temp_dir);
if len(extract_path) != 1 : ## extract_path should contains only one Directory & optional(DB Config file)
  print "Multiple directories exists in the extracted path, Unable to determine the actual extracted package, Exit";
  sys.exit();
else:
  tws_dir = extract_path[0];
  #print(tws_dir);
  wlp_param_file = temp_dir + "/" + tws_dir + "/wlp_info/TWS95/wlp_files/configDropins/overrides/datasource.xml";
  tws_localopts_file = temp_dir + "/" + tws_dir + "/TWS_Engine/tws_config_files/localopts";
  TWS_OUT = process_tws_package(wlp_param_file, tws_localopts_file);
  #print TWS_OUT;
  i = 0;
  FULL_PARAMS = {};
  while i < len(TWS_OUT): ## Converting the Tuple TWS_OUT to Dictionary: FULL_PARAMS
    for key,value in TWS_OUT[i].items():
      FULL_PARAMS[key] = value;
    i = i+1;
  
  #print FULL_PARAMS;
    
  tws_version_file = temp_dir + "/" + tws_dir + "/TWS_Engine/version/patch.info";
  TWS_VERSION_OUT = get_tws_version(tws_version_file); ## Getting the Verison of TWS.
  #print TWS_VERSION_OUT;
  if TWS_VERSION_OUT:
    FULL_PARAMS.update(TWS_VERSION_OUT); ## Merging all the elements to a single Dictionary
  else: 
    print ("Unable to determine the Version of TWS Component Installed");
    sys.exit();

DB_OUT = process_db_package(tws_db_cfg, temp_dir);
#print DB_OUT;
if DB_OUT:
  FULL_PARAMS.update(DB_OUT); ## Merging all the elements to a single Dictionary
#print FULL_PARAMS;
OUT_FileHandle.write(json.dumps(FULL_PARAMS, indent = 4)); ## Writing the contents to a json file
OUT_FileHandle.write("\n");
OUT_FileHandle.close();
####
